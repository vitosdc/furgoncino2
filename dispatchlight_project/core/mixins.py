# core/mixins.py - NUOVO FILE - Sistema di autorizzazionifrom django.contrib.auth.mixins import LoginRequiredMixinfrom django.core.exceptions import PermissionDeniedfrom django.shortcuts import redirectfrom django.contrib import messagesfrom .models import Company, Technicianclass CompanyAccessMixin(LoginRequiredMixin):    """Base mixin per accesso all'azienda"""        def get_user_company(self):        """Ottiene l'azienda dell'utente corrente"""        user = self.request.user        try:            # Prima controlla se è proprietario            company = user.owned_companies.first()            if company:                return company                        # Poi controlla se è tecnico            technician = Technician.objects.get(user=user)            return technician.company        except Technician.DoesNotExist:            return None        def is_company_owner(self):        """Verifica se l'utente è proprietario dell'azienda"""        return self.request.user.owned_companies.exists()        def get_user_technician(self):        """Ottiene il tecnico se l'utente è un tecnico"""        try:            return Technician.objects.get(user=self.request.user)        except Technician.DoesNotExist:            return Noneclass OwnerRequiredMixin(CompanyAccessMixin):    """Mixin che richiede che l'utente sia proprietario dell'azienda"""        def dispatch(self, request, *args, **kwargs):        if not self.is_company_owner():            messages.error(request, 'Solo il proprietario dell\'azienda può accedere a questa sezione.')            return redirect('core:technician_dashboard')        return super().dispatch(request, *args, **kwargs)class TechnicianAccessMixin(CompanyAccessMixin):    """Mixin per accesso limitato del tecnico"""        def dispatch(self, request, *args, **kwargs):        company = self.get_user_company()        if not company:            messages.error(request, 'Nessuna azienda associata al tuo account.')            return redirect('core:login')        return super().dispatch(request, *args, **kwargs)class TechnicianOwnDataMixin(TechnicianAccessMixin):    """Mixin che permette al tecnico di vedere solo i propri dati"""        def get_queryset(self):        """Override per filtrare solo i dati del tecnico"""        queryset = super().get_queryset() if hasattr(super(), 'get_queryset') else self.model.objects.all()                if self.is_company_owner():            # Il proprietario vede tutti i dati della sua azienda            company = self.get_user_company()            if hasattr(self.model, 'company'):                return queryset.filter(company=company)            elif hasattr(self.model, 'technician'):                return queryset.filter(technician__company=company)        else:            # Il tecnico vede solo i suoi dati            technician = self.get_user_technician()            if technician and hasattr(self.model, 'technician'):                return queryset.filter(technician=technician)            else:                return queryset.none()                return querysetclass SmartRedirectMixin:    """Mixin per reindirizzare automaticamente in base al ruolo"""        def get_success_url(self):        """Reindirizza in base al ruolo dell'utente"""        if hasattr(self, 'success_url') and self.success_url:            return self.success_url                # Reindirizzamento intelligente        if self.request.user.owned_companies.exists():            return '/dashboard/'  # Dashboard proprietario        else:            return '/technician/dashboard/'  # Dashboard tecnico