# core/forms.py - FILE COMPLETOfrom django import formsfrom django.contrib.auth.models import Userfrom django.contrib.auth.forms import UserCreationFormfrom .models import WorkOrder, Customer, Technician, ServiceType, Companyclass OrderCreateForm(forms.ModelForm):    class Meta:        model = WorkOrder        fields = [            'customer', 'service_type', 'title', 'description',             'service_address', 'priority', 'scheduled_date',            'estimated_duration_minutes', 'estimated_price', 'technician'        ]        widgets = {            'title': forms.TextInput(attrs={                'class': 'form-control',                'placeholder': 'es. Riparazione rubinetto cucina'            }),            'description': forms.Textarea(attrs={                'class': 'form-control',                'rows': 3,                'placeholder': 'Descrizione dettagliata del problema...'            }),            'service_address': forms.Textarea(attrs={                'class': 'form-control',                'rows': 2,                'placeholder': 'Indirizzo completo dove effettuare l\'intervento'            }),            'scheduled_date': forms.DateTimeInput(attrs={                'class': 'form-control',                'type': 'datetime-local'            }),            'estimated_duration_minutes': forms.NumberInput(attrs={                'class': 'form-control',                'min': '15',                'step': '15'            }),            'estimated_price': forms.NumberInput(attrs={                'class': 'form-control',                'step': '0.01',                'min': '0'            }),            'priority': forms.Select(attrs={'class': 'form-control'}),            'customer': forms.Select(attrs={'class': 'form-control'}),            'service_type': forms.Select(attrs={'class': 'form-control'}),            'technician': forms.Select(attrs={'class': 'form-control'}),        }        labels = {            'customer': 'Cliente',            'service_type': 'Tipo di Servizio',            'title': 'Titolo Intervento',            'description': 'Descrizione',            'service_address': 'Indirizzo Intervento',            'priority': 'Priorità',            'scheduled_date': 'Data/Ora Pianificata',            'estimated_duration_minutes': 'Durata Stimata (minuti)',            'estimated_price': 'Prezzo Stimato (€)',            'technician': 'Assegna a Tecnico (opzionale)',        }        def __init__(self, *args, company=None, **kwargs):        super().__init__(*args, **kwargs)                if company:            # Filtra i clienti, tipi di servizio e tecnici per l'azienda corrente            self.fields['customer'].queryset = Customer.objects.filter(company=company)            self.fields['service_type'].queryset = ServiceType.objects.filter(company=company)            self.fields['technician'].queryset = Technician.objects.filter(company=company, is_active=True)                        # Rendi il tecnico opzionale            self.fields['technician'].required = False            self.fields['technician'].empty_label = "-- Assegna dopo --"                        # Se non ci sono tipi di servizio, rendi il campo opzionale            if not self.fields['service_type'].queryset.exists():                self.fields['service_type'].required = False                self.fields['service_type'].empty_label = "-- Nessun tipo configurato --"                # Aggiungi attributi CSS Bootstrap        for field_name, field in self.fields.items():            if 'class' not in field.widget.attrs:                field.widget.attrs['class'] = 'form-control'class CustomerCreateForm(forms.ModelForm):    class Meta:        model = Customer        fields = ['name', 'phone', 'email', 'address', 'notes']        widgets = {            'name': forms.TextInput(attrs={                'class': 'form-control',                'placeholder': 'Nome completo o ragione sociale'            }),            'phone': forms.TextInput(attrs={                'class': 'form-control',                'placeholder': '+39 123 456 7890'            }),            'email': forms.EmailInput(attrs={                'class': 'form-control',                'placeholder': 'email@esempio.it'            }),            'address': forms.Textarea(attrs={                'class': 'form-control',                'rows': 3,                'placeholder': 'Indirizzo completo'            }),            'notes': forms.Textarea(attrs={                'class': 'form-control',                'rows': 2,                'placeholder': 'Note aggiuntive (opzionale)'            }),        }        labels = {            'name': 'Nome Cliente',            'phone': 'Telefono',            'email': 'Email',            'address': 'Indirizzo',            'notes': 'Note',        }class TechnicianCreateForm(forms.ModelForm):    # Campi per creare l'utente associato    first_name = forms.CharField(max_length=30, label='Nome')    last_name = forms.CharField(max_length=30, label='Cognome')    username = forms.CharField(max_length=150, label='Username')    email = forms.EmailField(label='Email')    password = forms.CharField(widget=forms.PasswordInput, label='Password')    password_confirm = forms.CharField(widget=forms.PasswordInput, label='Conferma Password')        class Meta:        model = Technician        fields = ['phone', 'vehicle_plate']        widgets = {            'phone': forms.TextInput(attrs={                'class': 'form-control',                'placeholder': '+39 123 456 7890'            }),            'vehicle_plate': forms.TextInput(attrs={                'class': 'form-control',                'placeholder': 'es. AB123CD'            }),        }        labels = {            'phone': 'Telefono',            'vehicle_plate': 'Targa Veicolo (opzionale)',        }        def __init__(self, *args, **kwargs):        super().__init__(*args, **kwargs)                # Aggiungi CSS a tutti i campi        for field_name, field in self.fields.items():            if 'class' not in field.widget.attrs:                field.widget.attrs['class'] = 'form-control'        def clean(self):        cleaned_data = super().clean()        password = cleaned_data.get('password')        password_confirm = cleaned_data.get('password_confirm')                if password and password_confirm and password != password_confirm:            raise forms.ValidationError("Le password non corrispondono!")                return cleaned_data        def clean_username(self):        username = self.cleaned_data['username']        if User.objects.filter(username=username).exists():            raise forms.ValidationError("Username già esistente!")        return username        def save(self, commit=True):        # Crea prima l'utente        user = User.objects.create_user(            username=self.cleaned_data['username'],            email=self.cleaned_data['email'],            first_name=self.cleaned_data['first_name'],            last_name=self.cleaned_data['last_name'],            password=self.cleaned_data['password']        )                # Poi crea il tecnico        technician = super().save(commit=False)        technician.user = user                if commit:            technician.save()                return technicianclass ServiceTypeForm(forms.ModelForm):    class Meta:        model = ServiceType        fields = ['name', 'description', 'estimated_duration_minutes', 'default_price']        widgets = {            'name': forms.TextInput(attrs={                'class': 'form-control',                'placeholder': 'es. Riparazione Idraulica'            }),            'description': forms.Textarea(attrs={                'class': 'form-control',                'rows': 2,                'placeholder': 'Descrizione del tipo di servizio'            }),            'estimated_duration_minutes': forms.NumberInput(attrs={                'class': 'form-control',                'min': '15',                'step': '15'            }),            'default_price': forms.NumberInput(attrs={                'class': 'form-control',                'step': '0.01',                'min': '0'            }),        }        labels = {            'name': 'Nome Tipo Servizio',            'description': 'Descrizione',            'estimated_duration_minutes': 'Durata Stimata (minuti)',            'default_price': 'Prezzo Standard (€)',        }class CompanySetupForm(forms.ModelForm):    """Form per la configurazione iniziale dell'azienda"""    class Meta:        model = Company        fields = ['name', 'address', 'phone', 'email']        widgets = {            'name': forms.TextInput(attrs={                'class': 'form-control',                'placeholder': 'Nome della tua azienda'            }),            'address': forms.Textarea(attrs={                'class': 'form-control',                'rows': 3,                'placeholder': 'Indirizzo sede principale'            }),            'phone': forms.TextInput(attrs={                'class': 'form-control',                'placeholder': '+39 123 456 7890'            }),            'email': forms.EmailInput(attrs={                'class': 'form-control',                'placeholder': 'info@tuaazienda.it'            }),        }        labels = {            'name': 'Nome Azienda',            'address': 'Indirizzo',            'phone': 'Telefono',            'email': 'Email',        }class QuickOrderForm(forms.Form):    """Form semplificato per la creazione rapida di ordini"""    customer_name = forms.CharField(        max_length=200,        label='Nome Cliente',        widget=forms.TextInput(attrs={            'class': 'form-control',            'placeholder': 'Nome cliente o azienda'        })    )    customer_phone = forms.CharField(        max_length=20,        label='Telefono',        widget=forms.TextInput(attrs={            'class': 'form-control',            'placeholder': '+39 123 456 7890'        })    )    title = forms.CharField(        max_length=200,        label='Problema/Intervento',        widget=forms.TextInput(attrs={            'class': 'form-control',            'placeholder': 'es. Perdita rubinetto'        })    )    address = forms.CharField(        widget=forms.Textarea(attrs={            'class': 'form-control',            'rows': 2,            'placeholder': 'Indirizzo completo'        }),        label='Indirizzo'    )    priority = forms.ChoiceField(        choices=WorkOrder.PRIORITY_CHOICES,        initial='NORMAL',        widget=forms.Select(attrs={'class': 'form-control'}),        label='Priorità'    )    notes = forms.CharField(        required=False,        widget=forms.Textarea(attrs={            'class': 'form-control',            'rows': 2,            'placeholder': 'Note aggiuntive...'        }),        label='Note'    )class TechnicianStatusUpdateForm(forms.Form):    """Form per aggiornare lo status dal lato tecnico"""    STATUS_CHOICES = [        ('EN_ROUTE', 'In Viaggio'),        ('ON_SITE', 'Arrivato sul Posto'),        ('COMPLETED', 'Lavoro Completato'),    ]        status = forms.ChoiceField(        choices=STATUS_CHOICES,        widget=forms.Select(attrs={'class': 'form-control'}),        label='Stato'    )    notes = forms.CharField(        required=False,        widget=forms.Textarea(attrs={            'class': 'form-control',            'rows': 3,            'placeholder': 'Note sull\'intervento...'        }),        label='Note'    )    work_performed = forms.CharField(        required=False,        widget=forms.Textarea(attrs={            'class': 'form-control',            'rows': 3,            'placeholder': 'Descrizione del lavoro svolto...'        }),        label='Lavoro Svolto'    )    materials_used = forms.CharField(        required=False,        widget=forms.Textarea(attrs={            'class': 'form-control',            'rows': 2,            'placeholder': 'Materiali utilizzati...'        }),        label='Materiali Utilizzati'    )    final_price = forms.DecimalField(        required=False,        max_digits=10,        decimal_places=2,        widget=forms.NumberInput(attrs={            'class': 'form-control',            'step': '0.01',            'min': '0'        }),        label='Prezzo Finale (€)'    )# ============================================================================# FORM PER REGISTRAZIONE AZIENDA# ============================================================================class UserRegistrationForm(forms.ModelForm):    """Form per registrazione utente imprenditore"""    first_name = forms.CharField(        max_length=30,        label='Nome',        widget=forms.TextInput(attrs={            'class': 'form-control',            'placeholder': 'Mario'        })    )    last_name = forms.CharField(        max_length=30,        label='Cognome',        widget=forms.TextInput(attrs={            'class': 'form-control',            'placeholder': 'Rossi'        })    )    username = forms.CharField(        max_length=150,        label='Nome Utente',        widget=forms.TextInput(attrs={            'class': 'form-control',            'placeholder': 'mario.rossi'        }),        help_text='Username per accedere al sistema'    )    email = forms.EmailField(        label='Email',        widget=forms.EmailInput(attrs={            'class': 'form-control',            'placeholder': 'mario@esempio.it'        })    )    password1 = forms.CharField(        label='Password',        widget=forms.PasswordInput(attrs={            'class': 'form-control',            'placeholder': 'Password sicura'        }),        help_text='Minimo 8 caratteri'    )    password2 = forms.CharField(        label='Conferma Password',        widget=forms.PasswordInput(attrs={            'class': 'form-control',            'placeholder': 'Ripeti la password'        })    )        class Meta:        model = User        fields = ('first_name', 'last_name', 'username', 'email')        def clean_username(self):        username = self.cleaned_data['username']        if User.objects.filter(username=username).exists():            raise forms.ValidationError("Questo nome utente è già in uso.")        return username        def clean_email(self):        email = self.cleaned_data['email']        if User.objects.filter(email=email).exists():            raise forms.ValidationError("Questa email è già registrata.")        return email        def clean(self):        cleaned_data = super().clean()        password1 = cleaned_data.get('password1')        password2 = cleaned_data.get('password2')                if password1 and password2 and password1 != password2:            raise forms.ValidationError("Le password non corrispondono!")                if password1 and len(password1) < 8:            raise forms.ValidationError("La password deve essere di almeno 8 caratteri.")                return cleaned_data        def save(self, commit=True):        user = super().save(commit=False)        user.set_password(self.cleaned_data['password1'])        user.email = self.cleaned_data['email']                if commit:            user.save()        return userclass CompanyRegistrationForm(forms.ModelForm):    """Form per registrazione azienda"""        class Meta:        model = Company        fields = ['name', 'address', 'phone', 'email']        widgets = {            'name': forms.TextInput(attrs={                'class': 'form-control',                'placeholder': 'es. Idraulica Mario Rossi'            }),            'address': forms.Textarea(attrs={                'class': 'form-control',                'rows': 3,                'placeholder': 'Via Roma 123, 20100 Milano (MI)'            }),            'phone': forms.TextInput(attrs={                'class': 'form-control',                'placeholder': '+39 02 1234567'            }),            'email': forms.EmailInput(attrs={                'class': 'form-control',                'placeholder': 'info@tuaazienda.it'            }),        }        labels = {            'name': 'Nome Azienda',            'address': 'Indirizzo Sede',            'phone': 'Telefono Aziendale',            'email': 'Email Aziendale',        }        help_texts = {            'name': 'Il nome che apparirà sui documenti e fatture',            'phone': 'Numero principale dell\'azienda',            'email': 'Email di contatto per clienti e comunicazioni',        }        def clean_name(self):        name = self.cleaned_data['name']        if len(name) < 3:            raise forms.ValidationError("Il nome dell'azienda deve essere di almeno 3 caratteri.")        return nameclass QuickSetupForm(forms.Form):    """Form per setup rapido durante l'onboarding"""        # Tipo di attività    BUSINESS_TYPES = [        ('plumbing', 'Idraulico'),        ('electrician', 'Elettricista'),        ('heating', 'Termoidraulico'),        ('appliance', 'Riparazione Elettrodomestici'),        ('cleaning', 'Servizi di Pulizia'),        ('maintenance', 'Manutenzione Generale'),        ('delivery', 'Consegne'),        ('other', 'Altro'),    ]        business_type = forms.ChoiceField(        choices=BUSINESS_TYPES,        label='Tipo di Attività',        widget=forms.Select(attrs={'class': 'form-control'}),        help_text='Questo ci aiuterà a precompilare i tipi di servizio'    )        # Numero di tecnici previsti    expected_technicians = forms.IntegerField(        min_value=1,        max_value=50,        initial=2,        label='Numero di Tecnici/Operatori',        widget=forms.NumberInput(attrs={            'class': 'form-control',            'min': '1',            'max': '50'        }),        help_text='Quanti tecnici/operatori lavorano nella tua azienda?'    )        # Carico di lavoro medio    monthly_orders = forms.ChoiceField(        choices=[            ('1-20', '1-20 interventi al mese'),            ('21-50', '21-50 interventi al mese'),            ('51-100', '51-100 interventi al mese'),            ('100+', 'Più di 100 interventi al mese'),        ],        label='Volume di Lavoro Mensile',        widget=forms.Select(attrs={'class': 'form-control'}),        help_text='Stima approssimativa del tuo carico di lavoro'    )