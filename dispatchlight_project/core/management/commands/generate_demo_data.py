# core/management/commands/generate_demo_data.py - NUOVO FILEfrom django.core.management.base import BaseCommandfrom django.contrib.auth.models import Userfrom django.utils import timezonefrom core.models import Company, Technician, Customer, WorkOrder, ServiceTypeimport randomfrom datetime import timedeltaclass Command(BaseCommand):    help = 'Genera dati demo per testare la mappa live'        def add_arguments(self, parser):        parser.add_argument(            '--company-id',            type=int,            help='ID dell\'azienda per cui generare i dati demo'        )        parser.add_argument(            '--technicians',            type=int,            default=5,            help='Numero di tecnici da creare (default: 5)'        )        parser.add_argument(            '--customers',            type=int,            default=10,            help='Numero di clienti da creare (default: 10)'        )        parser.add_argument(            '--orders',            type=int,            default=15,            help='Numero di ordini da creare (default: 15)'        )        def handle(self, *args, **options):        company_id = options['company_id']                if company_id:            try:                company = Company.objects.get(id=company_id)            except Company.DoesNotExist:                self.stdout.write(                    self.style.ERROR(f'Azienda con ID {company_id} non trovata')                )                return        else:            # Usa la prima azienda disponibile            company = Company.objects.first()            if not company:                self.stdout.write(                    self.style.ERROR('Nessuna azienda trovata. Registra prima un\'azienda.')                )                return                self.stdout.write(f'Generazione dati demo per: {company.name}')                # Genera tipi di servizio se non esistono        self.create_service_types(company)                # Genera tecnici        self.create_technicians(company, options['technicians'])                # Genera clienti        self.create_customers(company, options['customers'])                # Genera ordini        self.create_orders(company, options['orders'])                self.stdout.write(            self.style.SUCCESS('Dati demo generati con successo!')        )        def create_service_types(self, company):        """Crea tipi di servizio standard"""        service_types = [            {                'name': 'Riparazione Urgente',                'description': 'Intervento di riparazione urgente',                'estimated_duration_minutes': 120,                'default_price': 150.00            },            {                'name': 'Manutenzione Ordinaria',                'description': 'Manutenzione programmata',                'estimated_duration_minutes': 90,                'default_price': 80.00            },            {                'name': 'Installazione',                'description': 'Installazione nuovo impianto',                'estimated_duration_minutes': 180,                'default_price': 200.00            },            {                'name': 'Controllo Tecnico',                'description': 'Ispezione e controllo tecnico',                'estimated_duration_minutes': 60,                'default_price': 50.00            }        ]                for service_data in service_types:            service_type, created = ServiceType.objects.get_or_create(                name=service_data['name'],                company=company,                defaults=service_data            )            if created:                self.stdout.write(f'  Creato tipo servizio: {service_type.name}')        def create_technicians(self, company, count):        """Crea tecnici demo con coordinate GPS simulate"""        technician_names = [            ('Mario', 'Rossi', 'mario.rossi'),            ('Luca', 'Bianchi', 'luca.bianchi'),            ('Giuseppe', 'Verdi', 'giuseppe.verdi'),            ('Francesco', 'Ferrari', 'francesco.ferrari'),            ('Alessandro', 'Romano', 'alessandro.romano'),            ('Marco', 'Ricci', 'marco.ricci'),            ('Andrea', 'Marino', 'andrea.marino'),            ('Paolo', 'Greco', 'paolo.greco')        ]                # Coordinate base Roma        base_lat = 41.9028        base_lng = 12.4964                for i in range(count):            if i < len(technician_names):                first_name, last_name, username = technician_names[i]            else:                first_name = f'Tecnico{i+1}'                last_name = 'Demo'                username = f'tecnico{i+1}'                        # Crea utente se non esiste            user, created = User.objects.get_or_create(                username=username,                defaults={                    'first_name': first_name,                    'last_name': last_name,                    'email': f'{username}@demo.com',                    'password': 'pbkdf2_sha256$260000$demo$demo123'  # password: demo123                }            )                        # Coordinate simulate intorno a Roma            lat_offset = random.uniform(-0.08, 0.08)  # ~9km range            lng_offset = random.uniform(-0.08, 0.08)                        # Crea tecnico se non esiste            technician, created = Technician.objects.get_or_create(                user=user,                company=company,                defaults={                    'phone': f'+39 33{random.randint(10000000, 99999999)}',                    'vehicle_plate': f'{random.choice(["AB", "CD", "EF", "GH"])}{random.randint(100, 999)}{random.choice(["AB", "CD", "EF"])}',                    'is_active': random.choice([True, True, True, False]),  # 75% attivi                    'current_latitude': base_lat + lat_offset,                    'current_longitude': base_lng + lng_offset,                    'last_location_update': timezone.now() - timedelta(minutes=random.randint(1, 30))                }            )                        if created:                self.stdout.write(f'  Creato tecnico: {technician.user.get_full_name()}')        def create_customers(self, company, count):        """Crea clienti demo"""        customer_names = [            'Hotel Roma Centro',            'Ristorante Da Mario',            'Condominio Viale Europa',            'Uffici Porta Pia',            'Supermercato Fresh',            'Bar Centrale',            'Farmacia San Giovanni',            'Clinica Salus',            'Scuola Elementare Mazzini',            'Negozio Elettronica Tech',            'Parrucchiere Bella Vista',            'Palestra Fitness Club',            'Pizzeria Napoli',            'Autofficina Rossi',            'Lavanderia Express'        ]                addresses = [            'Via del Corso 123, Roma',            'Piazza Venezia 45, Roma',            'Via Nazionale 78, Roma',            'Viale Trastevere 234, Roma',            'Via Appia Nuova 567, Roma',            'Corso Vittorio Emanuele 89, Roma',            'Via dei Fori Imperiali 12, Roma',            'Piazza di Spagna 34, Roma',            'Via Veneto 156, Roma',            'Largo Argentina 78, Roma',            'Via Ottaviano 234, Roma',            'Viale Marconi 456, Roma',            'Via Tuscolana 789, Roma',            'Via Prenestina 123, Roma',            'Via Salaria 345, Roma'        ]                for i in range(count):            customer_name = customer_names[i % len(customer_names)]            if i >= len(customer_names):                customer_name += f' {i // len(customer_names) + 1}'                        Customer.objects.get_or_create(                name=customer_name,                company=company,                defaults={                    'phone': f'+39 06 {random.randint(1000000, 9999999)}',                    'email': f'{customer_name.lower().replace(" ", "")}@example.com',                    'address': addresses[i % len(addresses)],                    'notes': 'Cliente demo generato automaticamente'                }            )                self.stdout.write(f'  Creati {count} clienti demo')        def create_orders(self, company, count):        """Crea ordini demo"""        customers = list(Customer.objects.filter(company=company))        technicians = list(Technician.objects.filter(company=company))        service_types = list(ServiceType.objects.filter(company=company))                if not customers or not service_types:            self.stdout.write(                self.style.WARNING('Non ci sono clienti o tipi di servizio per creare ordini')            )            return                order_titles = [            'Perdita tubazione cucina',            'Sostituzione rubinetto bagno',            'Riparazione caldaia',            'Installazione termosifone',            'Controllo impianto elettrico',            'Riparazione lavastoviglie',            'Manutenzione condizionatore',            'Sostituzione interruttore',            'Riparazione scarico intasato',            'Installazione nuovo boiler',            'Controllo pressione acqua',            'Riparazione perdita soffitto',            'Sostituzione guarnizioni',            'Pulizia filtri impianto',            'Riparazione pompa acqua'        ]                descriptions = [            'Il cliente segnala una perdita d\'acqua in cucina che sembra provenire dai tubi sotto il lavello.',            'Necessario sostituire il rubinetto del bagno che perde e non chiude bene.',            'La caldaia non si accende e non produce acqua calda da ieri sera.',            'Installazione di un nuovo termosifone nella camera da letto.',            'Controllo generale dell\'impianto elettrico per verifiche di sicurezza.',            'La lavastoviglie non scarica l\'acqua e sembra bloccata.',            'Il condizionatore fa rumori strani e non raffredda più come prima.',            'Sostituzione di un interruttore difettoso nell\'ingresso.',            'Lo scarico del bagno è completamente intasato.',            'Installazione di un nuovo boiler per sostituire quello vecchio.',            'Verifica della pressione dell\'acqua che sembra troppo bassa.',            'C\'è una macchia d\'umidità sul soffitto che potrebbe indicare una perdita.',            'Le guarnizioni dei rubinetti sono da sostituire perché perdono.',            'Pulizia e manutenzione dei filtri dell\'impianto di climatizzazione.',            'La pompa dell\'acqua non funziona correttamente.'        ]                for i in range(count):            customer = random.choice(customers)            service_type = random.choice(service_types)                        # Alcuni ordini assegnati, altri no            technician = None            status = 'PENDING'            assigned_at = None                        if random.random() < 0.6:  # 60% degli ordini assegnati                if technicians:                    technician = random.choice([t for t in technicians if t.is_active])                    status = random.choice(['ASSIGNED', 'EN_ROUTE', 'ON_SITE'])                    assigned_at = timezone.now() - timedelta(hours=random.randint(1, 8))                        WorkOrder.objects.create(                company=company,                customer=customer,                technician=technician,                service_type=service_type,                title=order_titles[i % len(order_titles)],                description=descriptions[i % len(descriptions)],                status=status,                priority=random.choice(['LOW', 'NORMAL', 'NORMAL', 'HIGH', 'URGENT']),  # Peso normale                scheduled_date=timezone.now() + timedelta(hours=random.randint(1, 72)),                estimated_duration_minutes=service_type.estimated_duration_minutes,                estimated_price=service_type.default_price,                service_address=customer.address,                assigned_at=assigned_at,                created_at=timezone.now() - timedelta(hours=random.randint(1, 48))            )                self.stdout.write(f'  Creati {count} ordini demo')